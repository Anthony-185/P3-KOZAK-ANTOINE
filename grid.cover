    1: """
       if __name__ == '__main__'
       console version of the game
       """
    1: import random
    1: import string
       
    2: class Grid:
               
    1:         def __init__(self):
               
    1:                 number_case_x = number_case_y = 15
   17:                 line_X = tuple( "{:0>2}".format(i+1) for i in range(number_case_x) )
   17:                 line_Y = tuple( i for i in string.ascii_uppercase[0:number_case_y] )
    1:                 dict_all_case = dict_str_to_int = {}
                       
   16:                 for x,i in enumerate( line_X ) :
  240:                         for y,j in enumerate( line_Y ) :
                                       
  225:                                 dict_all_case[x+1, y+1] = self.Case( j+i, "free", (x+1, y+1))
  225:                                 dict_str_to_int[j+i] = x+1, y+1
                                       
    1:         def coord_str_To_int(coord): # "A02" >> (1,2)
                       return dict_str_to_int.get([coord])
                       
    1:         def coord_int_To_str(coord): # (1,2) >> "A02" """
                       return dict_all_case.get([coord]).name
                       
    1:         def check_point_in_grid(pos) : # is (1,2) in grid of the game ? (True or False)
  300:                 return( ( pos[0] >= 1 and pos[0] <= 15 ) and # Grid.number_case_x
  145:                                 ( pos[1] >= 1 and pos[1] <= 15 ) )   # Grid.number_case_y
       
       
    2:         class Case:
               
    1:                 def __init__(self, name, status, coord):
                       
  225:                         self.name = name
  225:                         self.status = status
  225:                         self.coord = coord
                               
                               
    2:         class Path:
               
               # /////////////////////////////////////////////////////////
               # Path generer par grid directement
               # mettre les valeurs number case lié à GRID, faire en sorte que ca se modifie facilement
               # generer la map, puis la load, ca serait cool
               # la faire en json ou sql, ca serait cool aussi !!!
               
    1:                 def __init__(self):
                       
    1:                         self.start = self.middle = self.finish = (0,0)
    1:                         self.path       = set()
                               
    1:                 def by_load_defaut_map(self):
                       
                               pass
                               
    1:                 def by_path_generator(self):
                       
    1:                         x = random.randrange(15) + 1 # how to link to number_case
    1:                         y = random.randrange(15) + 1 # how to link to number_case
    1:                         self.start = actual_position = (x, y)
    1:                         self.path.add( self.start )
    1:                         road_finish = goal_middle_placed = False
    1:                         i_some_path = 0 
                               
   59:                         while not road_finish :
       
   58:                                 x, y = actual_position[0], actual_position[1]
   58:                                 future_position = [
   58:                                 ( x + 1 , y + 0 ) , #           [X]
   58:                                 ( x - 1 , y + 0 ) , #   [X] [O] [X]
   58:                                 ( x + 0 , y + 1 ) , #           [X]
   58:                                 ( x + 0 , y - 1 ) ] #   [0] actual_position
               
  348:                                 future_position = [ i for i in future_position if not i in self.path ]
  262:                                 future_position = [ i for i in future_position if Grid.check_point_in_grid(i) ]
               
   58:                                 if future_position == [] :
    3:                                         actual_position = random.sample(self.path, 1)[0] # sample because path is a set
    3:                                         continue
               
   55:                                 actual_position = random.choice(future_position)
   55:                                 self.path.add(actual_position)
   55:                                 i_some_path += 1
                                       
   55:                                 if i_some_path > 50 and random.randrange(100) > 70 : # to create some path                              
    2:                                         if not goal_middle_placed :                                     
    1:                                                 goal_middle_placed = True
    1:                                                 self.middle = actual_position
                                               else:
    1:                                                 road_finish = True
    1:                                                 self.finish = actual_position
       
    1: if __name__ == '__main__':
       
    1:         grid = Grid()
    1:         path = grid.Path()
    1:         path.by_path_generator()
    1:         Mac = path.start
               
    1:         playing = True
               
    5:         while playing:
                       
    4:                 print(4*"\n" + 80*"_" + "\n\n")
   64:                 for y in range(1,16):
   60:                         print(20*" ", end ="")
  960:                         for x in range(1,16):
  900:                                 if              (x,y) == Mac                    : print("|.", end="")
  896:                                 elif    (x,y) == path.start             : print("|S", end="")
  893:                                 elif    (x,y) == path.middle    : print("|O", end="")
  889:                                 elif    (x,y) == path.finish    : print("|X", end="")
  885:                                 elif    (x,y) in path.path              : print("| ", end="")
  676:                                 elif    (x,y) not in path.path  : print("|#", end="")
   60:                         print("|")
                       
    4:                 move = input("z: up, d: right, s: down, q: left, exit to quit\n>>> ")
       
    4:                 if move == 'exit' : playing = False
    3:                 elif move == 'z' : new_Mac = ( Mac[0], Mac[1] - 1 )
    3:                 elif move == 'd' : new_Mac = ( Mac[0] + 1, Mac[1] )
    2:                 elif move == 's' : new_Mac = ( Mac[0], Mac[1] + 1 )
    1:                 elif move == 'q' : new_Mac = ( Mac[0] - 1, Mac[1] )
    4:                 if Grid.check_point_in_grid(new_Mac): 
    4:                         if new_Mac in path.path:
    4:                                 Mac = new_Mac
       
